name: Create Release

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'package.json'
      - 'package-lock.json'
      - '**.md'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Get current version
      id: current_version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Current version: $VERSION"
    
    - name: Determine new version
      id: new_version
      run: |
        # Parse current version
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment patch version
        PATCH=$((PATCH + 1))
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version will be: $NEW_VERSION"
    
    - name: Update package.json version
      run: |
        # Update version in package.json
        npm version $NEW_VERSION --no-git-tag-version
        echo "Updated package.json to version $NEW_VERSION"
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
        
        if [ "$LAST_TAG" = "none" ]; then
          # No previous tags, use all commits
          COMMITS=$(git log --pretty=format:"%s (%h)" --no-merges)
        else
          # Get commits since last tag
          COMMITS=$(git log --pretty=format:"%s (%h)" $LAST_TAG..HEAD --no-merges)
        fi
        
        # Escape newlines for GitHub Actions
        CHANGELOG="${COMMITS//$'\n'/'%0A'}"
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
      
    
    - name: Commit version changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add package.json
        git commit -m "Bump version to $NEW_VERSION [skip ci]"
        git tag v$NEW_VERSION
    
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        tags: true
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release v${{ env.NEW_VERSION }}
        tag_name: v${{ env.NEW_VERSION }}
        body: |
          ## Changes in this Release

          ${{ env.CHANGELOG }}
          
          ## Installation
          
          ### Installers
          - Windows: Download the `.exe` installer
          - macOS: Download the `.dmg` file
          - Linux: Download the `.deb` package or `.AppImage`
          
          ### Portable Versions
          - Windows: Download the `TikTok-Chat-Moderator-Windows-Portable-v${{ env.NEW_VERSION }}.zip` archive
          - macOS: Download the `TikTok-Chat-Moderator-macOS-Portable-v${{ env.NEW_VERSION }}.zip` archive
          - Linux: Download the `TikTok-Chat-Moderator-Linux-Portable-v${{ env.NEW_VERSION }}.zip` archive
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Trigger Build Workflow
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: version-updated
        client-payload: '{"version": "${{ env.NEW_VERSION }}"}'