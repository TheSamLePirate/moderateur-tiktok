name: Build Application

on:
  push:
    branches: [ main, master ]
    paths:
      - 'package.json'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    # Allows manual trigger from the Actions tab
  repository_dispatch:
    types: [version-updated]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            output_name: win
            artifact_name: TikTok-Moderator-Windows
            file_extension: ".exe"
          - os: macos-latest
            output_name: mac
            artifact_name: TikTok-Moderator-macOS
            file_extension: ".app"
          - os: ubuntu-latest
            output_name: linux
            artifact_name: TikTok-Moderator-Linux
            file_extension: ""

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
          echo "VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_ENV
        else
          VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Setup Python (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Python dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
      
    - name: Install native dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        npm rebuild
      
    - name: Build for Windows (NSIS)
      if: matrix.os == 'windows-latest'
      run: npx electron-builder --win --x64 --dir && npx electron-builder --win --x64
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: npx electron-builder --mac --arm64 --dir && npx electron-builder --mac --arm64
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build for Linux (deb)
      if: matrix.os == 'ubuntu-latest'
      run: npx electron-builder --linux --x64 --dir && npx electron-builder --linux deb --x64
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create ZIP for Windows Executable
      if: matrix.os == 'windows-latest'
      run: |
        cd dist/win-unpacked
        7z a -r ../TikTok-Moderator-Windows-Portable-v${{ env.VERSION }}.zip *
      shell: bash
        
    - name: Create ZIP for macOS Executable
      if: matrix.os == 'macos-latest'
      run: |
        cd dist/mac
        zip -r ../TikTok-Moderator-macOS-Portable-v${{ env.VERSION }}.zip *.app
      shell: bash
        
    - name: Create ZIP for Linux Executable
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist/linux-unpacked
        zip -r ../TikTok-Moderator-Linux-Portable-v${{ env.VERSION }}.zip *
      shell: bash
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/*.exe
          dist/*.dmg
          dist/*.deb
          dist/*.AppImage
          dist/*.zip
        retention-days: 7

    - name: Upload Release Asset
      if: github.event_name == 'repository_dispatch' && github.event.action == 'version-updated'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        files: |
          dist/*.exe
          dist/*.dmg
          dist/*.deb
          dist/*.AppImage
          dist/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}